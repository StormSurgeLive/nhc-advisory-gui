#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.1 on Mon Feb 17 00:01:20 2025
#
# To get wxPerl visit http://www.wxperl.it
#

use v5.10;
use strict;
use Wx::Perl::Packager;
use Wx qw/wxTheClipboard/;
use Wx::DND;
#use threads;
use JSON::PP;
use HTTP::Tiny;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(963, 586));
    $self->SetTitle("ADCIRC Live Storm Tracker");
    
    

    # Menu Bar

    $self->{frame_menubar} = Wx::MenuBar->new();
    my $wxglade_tmp_menu;
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(wxID_ANY, "Exit", "");
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "File");
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "Edit");
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "Help");
    $self->SetMenuBar($self->{frame_menubar});
    
    # Menu Bar end

    
    $self->{panel_1} = Wx::Panel->new($self, wxID_ANY);
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{notebook_1} = Wx::Notebook->new($self->{panel_1}, wxID_ANY);
    $self->{sizer_1}->Add($self->{notebook_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_pane_1} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_pane_1}, "NHC Monitor");
    
    $self->{sizer_2} = Wx::FlexGridSizer->new(2, 2, 0, 0);
    
    $self->{button_1} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Custom");
    $self->{sizer_2}->Add($self->{button_1}, 0, wxEXPAND, 0);
    
    $self->{sizer_4} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_2}->Add($self->{sizer_4}, 1, wxEXPAND, 0);
    
    $self->{text_ctrl_1} = Wx::TextCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "https://raw.githubusercontent.com/StormSurgeLive/storm-archive/refs/heads/master/2024/advisories/al162024/009.CurrentStorms.json");
    $self->{text_ctrl_1}->SetMinSize(Wx::Size->new(800, 23));
    $self->{sizer_4}->Add($self->{text_ctrl_1}, 0, 0, 0);
    
    $self->{button_4} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "reset");
    $self->{sizer_4}->Add($self->{button_4}, 0, 0, 0);
    
    $self->{sizer_3} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2}->Add($self->{sizer_3}, 1, wxEXPAND, 0);
    
    $self->{sizer_3}->Add(0, 0, 0, 0, 0);
    
    $self->{button_2} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Test JSON");
    $self->{sizer_3}->Add($self->{button_2}, 0, wxEXPAND, 0);
    
    $self->{button_3} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Current JSON");
    $self->{sizer_3}->Add($self->{button_3}, 0, wxEXPAND, 0);
    
    $self->{sizer_3}->Add(0, 0, 0, 0, 0);
    
    $self->{tree_ctrl_1} = Wx::TreeCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxTR_HAS_BUTTONS|wxTR_NO_BUTTONS|wxTR_SINGLE);
    $self->{tree_ctrl_1}->SetMinSize(Wx::Size->new(800, 496));
    $self->{sizer_2}->Add($self->{tree_ctrl_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_ASGSStormArchive} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_ASGSStormArchive}, "ASGS Storm Archive");
    
    $self->{notebook_1_pane_1}->SetSizer($self->{sizer_2});
    
    $self->{panel_1}->SetSizer($self->{sizer_1});
    
    $self->Layout();
    Wx::Event::EVT_MENU($self, wxID_ANY, $self->can('DoQuit'));
    Wx::Event::EVT_BUTTON($self, $self->{button_1}->GetId, $self->can('update_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_4}->GetId, $self->can('resetURL'));
    Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, $self->can('get_test_NHC_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_3}->GetId, $self->can('get_current_NHC_JSON'));
    Wx::Event::EVT_TREE_ITEM_ACTIVATED($self, $self->{tree_ctrl_1}->GetId, $self->can('on_item_activated'));

    # end wxGlade
    return $self;

}

sub _async_get_JSON {
  my ($self) = @_;
  #my $worker = threads->create(
  # sub {
  # $self->{text_ctrl_1}->SetValue($self->{lastURL});
     my $content = HTTP::Tiny->new->get($self->{lastURL});
     local $@;
     my $data = eval { JSON::PP::decode_json($content->{content}) } or undef;
     if (not $data or $@) {
       say "WARN: an error occurred processing JSON response.";
       say $@ if $@;
       return;
     }
     $self->_JSON_to_tree($data);
  # }, $self);
  #$worker->detach;
  # treat as FIFO, clean up oldest first
  #push @{$self->{worker_threads}}, $worker;
  #while (scalar @{$self->{worker_threads}} > 5) {
  #  say "purging old thread ...";
  #  my $old_worker = shift @{$self->{worker_threads}};
  #  $old_worker->join;
  #}
  return;
}

sub update_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::update_JSON <event_handler>
  # end wxGlade

  my $URL = $self->{text_ctrl_1}->GetValue;
  $self->{lastURL} = $URL;

  return $self->_async_get_JSON($URL);
}

sub get_test_NHC_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::get_test_NHC_JSON <event_handler>
  # end wxGlade

  my $URL = "https://www.nhc.noaa.gov/productexamples/NHC_JSON_Sample.json";
  $self->{lastURL} = $URL;

  return $self->_async_get_JSON($URL);
}

sub get_current_NHC_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::get_current_NHC_JSON <event_handler>
  # end wxGlade

  my $URL = "https://www.nhc.noaa.gov/CurrentStorms.json";
  $self->{lastURL} = $URL;

  return $self->_async_get_JSON($URL);
}

sub on_item_activated {
    my ($self, $event) = @_;

    # wxGlade: MyFrame::on_item_activated <event_handler>
    # end wxGlade

    my $tree = $event->GetEventObject();
    my $item = $event->GetItem();

    # Get the stored URL from item data
    my $url = $tree->GetItemData($item);
 
    # Open the URL (could use a web browser or simply print the URL for now)
    if (defined $url) {
      my $url_text = $url->GetData;
      $self->_copy_text_to_clipboard($url_text);
    }
}

sub _copy_text_to_clipboard {
    my ($self, $text_to_copy) = @_;

    # Get the clipboard object
    # Open the clipboard
    if (wxTheClipboard->Open) {
        # Set the wxTheClipboard data (you must wrap the text in a Wx::TextDataObject)
        my $text_data = Wx::TextDataObject->new($text_to_copy);

        # Clear the wxTheClipboard and set the new data
        wxTheClipboard->Clear;
        wxTheClipboard->SetData($text_data);

        # Close the wxTheClipboard
        wxTheClipboard->Close;

	say "Copied '$text_to_copy' to clipboard.";
        # Optionally, show a message box confirming the action
        Wx::MessageBox("URL copied to clipboard!", "Success", wxOK | wxICON_INFORMATION, $self);
    }
    else {
        Wx::MessageBox("Failed to open clipboard!", "Error", wxOK | wxICON_ERROR, $self);
    }
    return;
}

sub _JSON_to_tree {
  my ($self, $data) = @_;

  # reset tree
  $self->{tree_ctrl_1}->DeleteAllItems;

  # Get the tree control object
  my $tree = $self->{tree_ctrl_1};
  my $numStorms = @{$data->{activeStorms}} || 0;
  my $root = $tree->AddRoot("Active Storms ($numStorms)");

  # Loop through each storm in the activeStorms array
  foreach my $storm (@{$data->{activeStorms}}) {
    # Add each storm as a branch under the root

    my $storm_tree = $tree->AppendItem($root, "$storm->{name} ($storm->{id})");

    # Iterate through all keys in the storm object
    foreach my $key (keys %$storm) {
      my $value = $storm->{$key};
      # Check if the field is a complex object (nested structure)
      if (ref $value eq 'HASH') {
        my $sub_tree = $tree->AppendItem($storm_tree, "$key");
        # For each nested field, append them as items
        foreach my $sub_key (keys %$value) {
          my $item = $tree->AppendItem($sub_tree, "$sub_key: $value->{$sub_key}");
          if ($value->{$sub_key} =~ m/^http/) {
            my $url = $value->{$sub_key}; ## store all URLs based on itemid
            $tree->SetItemData($item, Wx::TreeItemData->new($url)); ## store all URLs based on itemid
          }
        }
      }
      # If it's a simple value, just append it as is
      elsif (defined $value) {
        $tree->AppendItem($storm_tree, "$key: $value");
      }
      # If the field is undefined or empty, you may want to skip or add a placeholder
      else {
        $tree->AppendItem($storm_tree, "$key: Not Available");
      }
    }
  }

  $tree->Expand($root);

  return;
}

sub DoQuit {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::DoQuit <event_handler>
    # end wxGlade
    #say "purging old threads ...";
    #while (my $worker = pop @{$self->{worker_threads}}) {
    #  $worker->join();
    #}
    $self->Close;
}

sub resetURL {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::resetURL <event_handler>
    # end wxGlade
    $self->{text_ctrl_1}->SetValue("https://raw.githubusercontent.com/StormSurgeLive/storm-archive/refs/heads/master/2024/advisories/al162024/009.CurrentStorms.json");
    return $self->update_JSON(@_);
}

# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $frame = MyFrame->new();

    $self->SetTopWindow($frame);
    $frame->Show(1);

    return 1;
}
# end of class MyApp

package main;

my $app = MyApp->new();
$app->MainLoop();
