#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.1 on Sat Mar  1 20:04:20 2025
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx;
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(652, 445));
    $self->SetTitle("NHC Explorer - (C) ADCIRC Live - https://www.adcirc.live");
    
    

    # Menu Bar

    $self->{frame_menubar} = Wx::MenuBar->new();
    my $wxglade_tmp_menu;
    $wxglade_tmp_menu = Wx::Menu->new();
    $wxglade_tmp_menu->Append(wxID_ANY, "Exit", "");
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "File");
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "Edit");
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "Help");
    $self->SetMenuBar($self->{frame_menubar});
    
    # Menu Bar end

    
    $self->{panel_1} = Wx::Panel->new($self, wxID_ANY);
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{notebook_1} = Wx::Notebook->new($self->{panel_1}, wxID_ANY);
    $self->{sizer_1}->Add($self->{notebook_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_pane_1} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_pane_1}, "NHC Monitor");
    
    $self->{sizer_2} = Wx::FlexGridSizer->new(2, 2, 0, 0);
    
    $self->{button_1} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Custom");
    $self->{sizer_2}->Add($self->{button_1}, 0, wxEXPAND, 0);
    
    $self->{sizer_4} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_2}->Add($self->{sizer_4}, 1, wxEXPAND, 0);
    
    $self->{text_ctrl_1} = Wx::TextCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "https://raw.githubusercontent.com/StormSurgeLive/storm-archive/refs/heads/master/2024/advisories/al162024/009.CurrentStorms.json");
    $self->{text_ctrl_1}->SetMinSize(Wx::Size->new(800, 23));
    $self->{sizer_4}->Add($self->{text_ctrl_1}, 0, 0, 0);
    
    $self->{button_4} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "reset");
    $self->{sizer_4}->Add($self->{button_4}, 0, 0, 0);
    
    $self->{sizer_3} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2}->Add($self->{sizer_3}, 1, wxEXPAND, 0);
    
    $self->{sizer_3}->Add(0, 0, 0, 0, 0);
    
    $self->{button_2} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Test JSON");
    $self->{sizer_3}->Add($self->{button_2}, 0, wxEXPAND, 0);
    
    $self->{button_3} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Current JSON");
    $self->{sizer_3}->Add($self->{button_3}, 0, wxEXPAND, 0);
    
    $self->{sizer_3}->Add(0, 0, 0, 0, 0);
    
    $self->{tree_ctrl_1} = Wx::TreeCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxTR_HAS_BUTTONS|wxTR_NO_BUTTONS|wxTR_SINGLE);
    $self->{tree_ctrl_1}->SetMinSize(Wx::Size->new(800, 496));
    $self->{sizer_2}->Add($self->{tree_ctrl_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_ASGSStormArchive} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_ASGSStormArchive}, "ASGS Storm Archive");
    
    $self->{notebook_1_pane_1}->SetSizer($self->{sizer_2});
    
    $self->{panel_1}->SetSizer($self->{sizer_1});
    
    $self->Layout();
    Wx::Event::EVT_MENU($self, wxID_ANY, $self->can('
                '));
    Wx::Event::EVT_BUTTON($self, $self->{button_1}->GetId, $self->can('update_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_4}->GetId, $self->can('resetURL'));
    Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, $self->can('get_test_NHC_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_3}->GetId, $self->can('get_current_NHC_JSON'));
    Wx::Event::EVT_TREE_ITEM_ACTIVATED($self, $self->{tree_ctrl_1}->GetId, $self->can('on_item_activated'));

    # end wxGlade
    return $self;

}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub update_JSON {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::update_JSON <event_handler>
    warn "Event handler (update_JSON) not implemented";
    $event->Skip;
    # end wxGlade
}


sub resetURL {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::resetURL <event_handler>
    warn "Event handler (resetURL) not implemented";
    $event->Skip;
    # end wxGlade
}


sub get_test_NHC_JSON {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::get_test_NHC_JSON <event_handler>
    warn "Event handler (get_test_NHC_JSON) not implemented";
    $event->Skip;
    # end wxGlade
}


sub get_current_NHC_JSON {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::get_current_NHC_JSON <event_handler>
    warn "Event handler (get_current_NHC_JSON) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_item_activated {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::on_item_activated <event_handler>
    warn "Event handler (on_item_activated) not implemented";
    $event->Skip;
    # end wxGlade
}



sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}


sub 
                 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::
                 <event_handler>
    warn "Event handler (
                ) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $frame = MyFrame->new();

    $self->SetTopWindow($frame);
    $frame->Show(1);

    return 1;
}
# end of class MyApp

package main;

my $app = MyApp->new();
$app->MainLoop();
