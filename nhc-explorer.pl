#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.1 on Mon Feb 17 00:01:20 2025
#
# To get wxPerl visit http://www.wxperl.it
#

use v5.10;
use strict;
use threads;
use Wx qw/wxTheClipboard/;
use Wx::DND;
use JSON::PP;
use HTTP::Tiny;
use PDL::NetCDF;
use Util::H2O::More qw/ddd HTTPTiny2h2o/;

my $BASEURL = "https://api.github.com/repos/StormSurgeLive/storm-archive/contents";

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;

my $archive_paths = {};

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxCAPTION|wxCLIP_CHILDREN|wxCLOSE_BOX|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxSYSTEM_MENU
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(1008, 596));
    $self->SetTitle("NHC Explorer - By ADCIRC Live (C) - https://www.adcirc.live");
    
    

    # Menu Bar

    $self->{frame_menubar} = Wx::MenuBar->new();
    my $wxglade_tmp_menu;
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{Exit} = $wxglade_tmp_menu->Append(wxID_ANY, "Exit", "");
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "File");
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{Aboutt} = $wxglade_tmp_menu->Append(wxID_ANY, "About", "");
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "Help");
    $self->SetMenuBar($self->{frame_menubar});
    
    # Menu Bar end

    
    $self->{panel_1} = Wx::Panel->new($self, wxID_ANY);
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{notebook_1} = Wx::Notebook->new($self->{panel_1}, wxID_ANY);
    $self->{sizer_1}->Add($self->{notebook_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_pane_1} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_pane_1}, "NHC Monitor");
    
    $self->{sizer_2} = Wx::FlexGridSizer->new(2, 2, 0, 0);
    
    $self->{sizer_2}->Add(0, 0, 0, 0, 0);
    
    $self->{sizer_4} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_2}->Add($self->{sizer_4}, 1, wxEXPAND, 0);
    
    $self->{text_ctrl_1} = Wx::TextCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, "https://raw.githubusercontent.com/StormSurgeLive/storm-archive/refs/heads/master/2024/advisories/al162024/009.CurrentStorms.json");
    $self->{text_ctrl_1}->SetMinSize(Wx::Size->new(800, 23));
    $self->{sizer_4}->Add($self->{text_ctrl_1}, 0, 0, 0);
    
    $self->{sizer_4}->Add(0, 0, 0, 0, 0);
    
    $self->{button_1} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Go");
    $self->{sizer_4}->Add($self->{button_1}, 0, wxEXPAND, 0);
    
    $self->{sizer_3} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2}->Add($self->{sizer_3}, 1, wxEXPAND, 0);
    
    $self->{button_3} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Load Active");
    $self->{button_3}->SetToolTip("Load any active storms per the NHC.");
    $self->{sizer_3}->Add($self->{button_3}, 0, wxEXPAND, 0);
    
    $self->{button_5} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Explore Archive");
    $self->{button_5}->SetToolTip("Browse and load past storms and advisories.");
    $self->{sizer_3}->Add($self->{button_5}, 0, wxEXPAND, 0);
    
    $self->{button_2} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "NHC Sample");
    $self->{button_2}->SetToolTip("Loads NHC's sample JSON product, available during non-active periods.");
    $self->{sizer_3}->Add($self->{button_2}, 0, wxEXPAND, 0);
    
    $self->{button_6} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Exit");
    $self->{sizer_3}->Add($self->{button_6}, 0, wxEXPAND, 0);
    
    $self->{tree_ctrl_1} = Wx::TreeCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxTR_HAS_BUTTONS|wxTR_SINGLE);
    $self->{tree_ctrl_1}->SetMinSize(Wx::Size->new(800, 496));
    $self->{sizer_2}->Add($self->{tree_ctrl_1}, 0, wxEXPAND, 0);
    
    $self->{notebook_1_pane_1}->SetSizer($self->{sizer_2});
    
    $self->{panel_1}->SetSizer($self->{sizer_1});
    
    $self->Layout();
    Wx::Event::EVT_MENU($self, $self->{Exit}->GetId, $self->can('DoQuit'));
    Wx::Event::EVT_MENU($self, $self->{Aboutt}->GetId, $self->can('show_license_dialog'));
    Wx::Event::EVT_BUTTON($self, $self->{button_1}->GetId, $self->can('update_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_3}->GetId, $self->can('get_current_NHC_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_5}->GetId, $self->can('explore_archive'));
    Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, $self->can('get_test_NHC_JSON'));
    Wx::Event::EVT_BUTTON($self, $self->{button_6}->GetId, $self->can('DoQuit'));
    Wx::Event::EVT_TREE_ITEM_ACTIVATED($self, $self->{tree_ctrl_1}->GetId, $self->can('on_item_activated'));

    # end wxGlade
    return $self;

}

sub _async_get_JSON {
  my ($self) = @_;
  my $dialog = Wx::Dialog->new($self, -1, "Please Wait ...", wxDefaultPosition, [200, 50]);
  $dialog->CenterOnParent;
  $dialog->Show;
  my $content = HTTP::Tiny->new->get($self->{lastURL});
  local $@;
  my $data = eval { JSON::PP::decode_json($content->{content}) } or undef;
  if (not $data or $@) {
    say "WARN: an error occurred processing JSON response.";
    say $@ if $@;
    return;
  }
  $self->_JSON_to_tree($data);
  $dialog->Destroy;
  return;
}

sub update_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::update_JSON <event_handler>
  # end wxGlade

  my $URL = $self->{text_ctrl_1}->GetValue;
  $self->{lastURL} = $URL;

  return $self->_async_get_JSON($URL);
}

sub get_test_NHC_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::get_test_NHC_JSON <event_handler>
  # end wxGlade

  my $URL = "https://www.nhc.noaa.gov/productexamples/NHC_JSON_Sample.json";
  $self->{text_ctrl_1}->SetValue($URL);
  $self->{lastURL} = $URL;

  return $self->_async_get_JSON($URL);
}

sub get_current_NHC_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::get_current_NHC_JSON <event_handler>
  # end wxGlade

  my $URL = "https://www.nhc.noaa.gov/CurrentStorms.json";
  $self->{text_ctrl_1}->SetValue($URL);
  $self->{lastURL} = $URL;

  return $self->_async_get_JSON($URL);
}

sub on_item_activated {
    my ($self, $event) = @_;

    # wxGlade: MyFrame::on_item_activated <event_handler>
    # end wxGlade

    my $tree = $event->GetEventObject();
    my $item = $event->GetItem();

    # Get the stored URL from item data
    my $value = $tree->GetItemData($item);
 
    # Open the URL (could use a web browser or simply print the URL for now)
    if (defined $value and $value->GetData =~ m/^http/) {
      my $url_text = $value->GetData;
      $self->_copy_text_to_clipboard($url_text);
      # if .json, add to address field
      if ($url_text =~ m/json$/) {
        $self->{text_ctrl_1}->SetValue($url_text);
      }
    }
    else {
      my $path = $value->GetData; 
      my $dialog = Wx::Dialog->new($self, -1, "Please Wait ...", wxDefaultPosition, [200, 50]);
      $dialog->CenterOnParent;
      $dialog->Show;
      my $files = Util::H2O::More::HTTPTiny2h2o(HTTP::Tiny->new->get("$BASEURL/$path"));
      my @file_urls = ();
      foreach my $file ($files->content->all) {
        my $download_url = $file->download_url;
        push @file_urls, $download_url; # if $download_url =~ m/json$/; 
      }
      # show as a tree of files now to be double clicked
      $self->_append_to_tree($tree, $item, \@file_urls);
      $dialog->Destroy;
    }
    return;
}

sub _copy_text_to_clipboard {
    my ($self, $text_to_copy) = @_;

    # Get the clipboard object
    # Open the clipboard
    if (wxTheClipboard->Open) {
        # Set the wxTheClipboard data (you must wrap the text in a Wx::TextDataObject)
        my $text_data = Wx::TextDataObject->new($text_to_copy);

        # Clear the wxTheClipboard and set the new data
        wxTheClipboard->Clear;
        wxTheClipboard->SetData($text_data);

        # Close the wxTheClipboard
        wxTheClipboard->Close;

        # Show a message box confirming the action
        Wx::MessageBox("URL copied to clipboard!", "Success", wxOK | wxICON_INFORMATION, $self);
    }
    else {
        Wx::MessageBox("Failed to open clipboard!", "Error", wxOK | wxICON_ERROR, $self);
    }
    return;
}

sub _append_to_tree {
  my ($self, $tree, $item, $file_urls) = @_;
  foreach my $path (@$file_urls) {
    my $new_item = $tree->AppendItem($item, "$path");
    $tree->SetItemData($new_item, Wx::TreeItemData->new($path)); ## store path for this itemid
  }
  $tree->Expand($item);
  return;
}

# converts paths for archives
sub _array_to_tree {
  my ($self, $data) = @_;

  # Get the tree control object
  my $tree = $self->{tree_ctrl_1};

  # reset tree
  $tree->DeleteAllItems;

  my $numPaths = scalar keys %$archive_paths;
  my $root = $tree->AddRoot("Archive Years ($numPaths)");

  foreach my $year (sort { $a <=> $b } keys %$archive_paths) {
    my $count = @{$archive_paths->{$year}};
    my $year_tree = $tree->AppendItem($root, "$year ($count)");
    foreach my $path (@{$archive_paths->{$year}}) {
      # Add each storm as a branch under the root
      my $item = $tree->AppendItem($year_tree, "$path");
      $tree->SetItemData($item, Wx::TreeItemData->new($path)); ## store path for this itemid
    }
  }

  $tree->Expand($root);
  return;
}

sub _get_archive_paths {
  my ($self, $force) = @_;
  return if %$archive_paths and !$force; # cache unless forced
  my $YEARS   = [qw/2022 2023 2024 2025/];
  foreach my $year (@$YEARS) {
    my $archive = Util::H2O::More::HTTPTiny2h2o(HTTP::Tiny->new->get("$BASEURL/$year/advisories"));
    foreach my $i (@{$archive->content}) {
      push @{$archive_paths->{$year}}, $i->path;
    }
  }
  return;
}

sub explore_archive {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::explore_archive <event_handler>
    # end wxGlade
    my $dialog = Wx::Dialog->new($self, -1, "Please Wait ...", wxDefaultPosition, [200, 50]);
    $dialog->CenterOnParent;
    $dialog->Show;
    $self->_get_archive_paths();
    $self->_array_to_tree($event);
    $dialog->Destroy;
    return;
}

# converts info from the JSON to a tree
sub _JSON_to_tree {
  my ($self, $data) = @_;

  # reset tree
  $self->{tree_ctrl_1}->DeleteAllItems;

  # Get the tree control object
  my $tree = $self->{tree_ctrl_1};
  my $numStorms = @{$data->{activeStorms}} || 0;
  my $root = $tree->AddRoot("Active Storms ($numStorms)");

  # Loop through each storm in the activeStorms array
  foreach my $storm (@{$data->{activeStorms}}) {
    # Add each storm as a branch under the root
    my $storm_tree = $tree->AppendItem($root, "$storm->{id} $storm->{name} ($storm->{publicAdvisory}->{advNum})");
    # Iterate through all keys in the storm object
    foreach my $key (keys %$storm) {
      my $value = $storm->{$key};
      # Check if the field is a complex object (nested structure)
      if (ref $value eq 'HASH') {
        my $sub_tree = $tree->AppendItem($storm_tree, "$key");
        # For each nested field, append them as items
        foreach my $sub_key (keys %$value) {
          my $item = $tree->AppendItem($sub_tree, "$sub_key: $value->{$sub_key}");
          if ($value->{$sub_key} =~ m/^http/) {
            my $url = $value->{$sub_key}; ## store all URLs based on itemid
            $tree->SetItemData($item, Wx::TreeItemData->new($url)); ## store all URLs based on itemid
          }
        }
      }
      # If it's a simple value, just append it as is
      elsif (defined $value) {
        $tree->AppendItem($storm_tree, "$key: $value");
      }
      # If the field is undefined or empty, you may want to skip or add a placeholder
      else {
        $tree->AppendItem($storm_tree, "$key: Not Available");
      }
    }
  }
  $tree->Expand($root);
  return;
}

sub DoQuit {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::DoQuit <event_handler>
    # end wxGlade
    $self->Close;
}

sub resetURL {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::resetURL <event_handler>
    # end wxGlade
    $self->{text_ctrl_1}->SetValue("https://raw.githubusercontent.com/StormSurgeLive/storm-archive/refs/heads/master/2024/advisories/al162024/009.CurrentStorms.json");
    return $self->update_JSON(@_);
}


sub show_license_dialog {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::show_license_dialog <event_handler>
    # end wxGlade
    my $dialog = Wx::Dialog->new($self, -1, "License and Credits",
        wxDefaultPosition, [640, 500], wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);

    my $text = <<'END_LICENSE';
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Credits:
  - Developed by:  Brett Estrade <brett.estrade@adcirc.live>
  - In Association with: ADCIRC Live (c), Seahorse Coasting Consulting,
    and Coastal Computing Services, LLC.
  - License: GNU GPL v3

Click the GitHub link below to view the project repository.
END_LICENSE

    my $panel = Wx::Panel->new($dialog, -1);
    my $sizer = Wx::BoxSizer->new(wxVERTICAL);

    my $textctrl = Wx::TextCtrl->new($panel, -1, $text,
        wxDefaultPosition, wxDefaultSize,
        wxTE_MULTILINE | wxTE_READONLY | wxTE_RICH | wxHSCROLL);

    $textctrl->SetFont(Wx::Font->new(10, wxFONTFAMILY_MODERN, wxNORMAL, wxNORMAL));

    # Hyperlink controls
    my $github_link   = Wx::HyperlinkCtrl->new($panel, -1, "https://github.com/StormSurgeLive/nhc-advisory-gui", "https://github.com/StormSurgeLive/nhc-advisory-gui");
    my $seahorse_link = Wx::HyperlinkCtrl->new($panel, -1, "https://seahorsecoastal.com",            "https://seahorsecoastal.com");
    my $coastal_link  = Wx::HyperlinkCtrl->new($panel, -1, "https://coastalcomputingservices.net",   "https://coastalcomputingservices.net");
    my $adcirc_link   = Wx::HyperlinkCtrl->new($panel, -1, "https://adcirc.live",                    "https://adcirc.live");

    my $btns = Wx::StdDialogButtonSizer->new;
    my $ok = Wx::Button->new($panel, wxID_OK);
    $btns->AddButton($ok);
    $btns->Realize;

    $sizer->Add($textctrl, 1, wxALL | wxEXPAND, 10);
    my $link_indent = 20;
    $sizer->Add($github_link,   0, wxLEFT | wxTOP | wxALIGN_LEFT, $link_indent);
    $sizer->Add($adcirc_link,   0, wxLEFT | wxTOP | wxALIGN_LEFT, $link_indent);
    $sizer->Add($seahorse_link, 0, wxLEFT | wxTOP | wxALIGN_LEFT, $link_indent);
    $sizer->Add($coastal_link,  0, wxLEFT | wxTOP | wxBOTTOM | wxALIGN_LEFT, $link_indent);
    $sizer->Add($btns,          0, wxALL  | wxALIGN_CENTER, 10);

    $panel->SetSizer($sizer);
    $dialog->CentreOnParent;
    $dialog->ShowModal;
    $dialog->Destroy;
    return;
}

# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $frame = MyFrame->new();

    $self->SetTopWindow($frame);
    $frame->Show(1);

    return 1;
}
# end of class MyApp

package main;

my $app = MyApp->new();
$app->MainLoop();
