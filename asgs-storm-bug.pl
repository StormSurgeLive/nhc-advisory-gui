#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.1 on Mon Feb 17 00:01:20 2025
#
# To get wxPerl visit http://www.wxperl.it
#

use v5.10;
use strict;
use Wx;
use JSON::PP;
use Util::H2O::More qw/ddd h2o/;
use HTTP::Tiny;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(592, 586));
    $self->SetTitle("ADCIRC Live Storm Tracker");
    
    $self->{panel_1} = Wx::Panel->new($self, wxID_ANY);
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{notebook_1} = Wx::Notebook->new($self->{panel_1}, wxID_ANY);
    $self->{sizer_1}->Add($self->{notebook_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_pane_1} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_pane_1}, "NHC Monitor");
    
    $self->{sizer_2} = Wx::FlexGridSizer->new(1, 2, 0, 0);
    
    $self->{sizer_3} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2}->Add($self->{sizer_3}, 1, wxEXPAND, 0);
    
    $self->{sizer_3}->Add(20, 20, 0, 0, 0);
    
    $self->{button_1} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Update");
    $self->{sizer_3}->Add($self->{button_1}, 0, 0, 0);
    
    $self->{button_2} = Wx::Button->new($self->{notebook_1_pane_1}, wxID_ANY, "Test JSON");
    $self->{sizer_3}->Add($self->{button_2}, 0, 0, 0);
    
    $self->{sizer_3}->Add(0, 0, 0, 0, 0);
    
    $self->{tree_ctrl_1} = Wx::TreeCtrl->new($self->{notebook_1_pane_1}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxTR_HAS_BUTTONS|wxTR_NO_BUTTONS|wxTR_SINGLE);
    $self->{tree_ctrl_1}->SetMinSize(Wx::Size->new(480, 496));
    $self->{sizer_2}->Add($self->{tree_ctrl_1}, 1, wxEXPAND, 0);
    
    $self->{notebook_1_ASGSStormArchive} = Wx::Panel->new($self->{notebook_1}, wxID_ANY);
    $self->{notebook_1}->AddPage($self->{notebook_1_ASGSStormArchive}, "ASGS Storm Archive");
    
    $self->{notebook_1_pane_1}->SetSizer($self->{sizer_2});
    
    $self->{panel_1}->SetSizer($self->{sizer_1});
    
    $self->Layout();
    Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, $self->can('get_test_NHC_JSON'));

    # end wxGlade
    return $self;

}


sub get_test_NHC_JSON {
  my ($self, $event) = @_;
  # wxGlade: MyFrame::get_test_NHC_JSON <event_handler>
  # end wxGlade
  my $sampleURL = "https://www.nhc.noaa.gov/productexamples/NHC_JSON_Sample.json";
  my $content = HTTP::Tiny->new->get($sampleURL);
  my $data = JSON::PP::decode_json($content->{content});

#-- once done, move over to its own function so it can handle
#-- real season updates (e.g., test using JSON archived in ASGS Storm Archive ...)
  my $tree = $self->{tree_ctrl_1};
  my $root = $tree->AddRoot('Active Storms');
  foreach my $storm (@{$data->{activeStorms}}) {
    my $storm_tree = $tree->AppendItem($root, "$storm->{name} ($storm->{id})");
    $tree->AppendItem($storm_tree, "Bin Number: $storm->{binNumber}");
    $tree->AppendItem($storm_tree, "Classification: $storm->{classification}");
    $tree->AppendItem($storm_tree, "Intensity: $storm->{intensity}");
    $tree->AppendItem($storm_tree, "Pressure: $storm->{pressure}");
    $tree->AppendItem($storm_tree, "Latitude: $storm->{latitude}");
    $tree->AppendItem($storm_tree, "Longitude: $storm->{longitude}");
    $tree->AppendItem($storm_tree, "Movement Direction: $storm->{movementDir}");
    $tree->AppendItem($storm_tree, "Movement Speed: $storm->{movementSpeed}");
    $tree->AppendItem($storm_tree, "Last Update: $storm->{lastUpdate}");
  }
  return;
}

# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $frame = MyFrame->new();

    $self->SetTopWindow($frame);
    $frame->Show(1);

    return 1;
}
# end of class MyApp

package main;

my $app = MyApp->new();
$app->MainLoop();
